{"version":3,"sources":["Joker.jpg","finger.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","title","flexGrow","textAlign","cardSize","margin","width","breakpoints","down","App","classes","useState","geneDialogFlag","setGeneDialogFlag","deckId","card","setCard","cardsRemaining","setCardsRemaining","handleCloseGeneDialog","className","style","backgroundColor","height","Dialog","open","onClose","DialogContent","Typography","variant","src","Finger","marginTop","placeholder","Joker","DialogActions","Button","onClick","color","AppBar","position","Toolbar","setTimeout","Card","raised","paddingTop","marginLeft","marginRight","paddingBottom","Grid","container","marginBottom","image","alt","id","paddingLeft","paddingRight","item","xs","sm","md","lg","size","fontSize","Axios","get","then","resp","console","log","catch","error","fullWidth","success","data","cards","remaining","disabled","Boolean","window","location","hostname","match","createMuiTheme","palette","primary","main","dark","contrastText","secondary","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.17b0b23d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Joker.b30f3d45.jpg\";","module.exports = __webpack_public_path__ + \"static/media/finger.54520459.png\";","import React,{useState} from 'react';\nimport './App.css';\nimport {Button,Card,Grid,AppBar,Toolbar,Typography} from '@material-ui/core';\nimport Axios from 'axios';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Finger from './finger.png'\nimport Joker from './Joker.jpg'\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\nconst useStyles = makeStyles((theme) => ({\n  title: {\n    flexGrow: 4,\n    textAlign:'left'\n  },\n  cardSize:{\n    margin:'auto',\n    width:'400px',\n    [theme.breakpoints.down('sm')]: {\n      width:'200px'\n    }\n  }\n}))\n\nconst App = () => {\n\n  const classes = useStyles();\n  \n  const [geneDialogFlag,setGeneDialogFlag] = useState(false)\n  const [deckId,setDeckId] = useState(\"cqif69lwm9tz\")\n  const [card,setCard] = useState({});\n  const [cardsRemaining,setCardsRemaining] = useState(0)\n\n  const handleGetCard = () => {\n    Axios.get(\"https://deckofcardsapi.com/api/deck/\"+deckId+\"/draw/?count=1\")\n    .then(resp => {\n      if(!resp.success){\n        \n        setCard(resp.data.cards[0])\n        console.log(resp)\n        setCardsRemaining(resp.data.remaining)\n      }\n    })\n    .catch((error)=>console.log(error))\n  }\n  const handleShuffle = () => {\n    Axios.get(\"https://deckofcardsapi.com/api/deck/\"+deckId+\"/shuffle/\")\n    .then(resp => {\n      console.log(resp);\n      setCardsRemaining(52)\n    })\n    .catch((error)=>console.log(error))\n\n  }\n\n  const handleGeneDialog = () => {\n    setGeneDialogFlag(true);\n    setTimeout(() => {\n      setGeneDialogFlag(false)\n    },3000)\n  }\n\n  const handleCloseGeneDialog = () => {\n    // setGeneDialogFlag(false)\n  }\n\n  return (\n    <div className=\"App\" style={{backgroundColor:'#D64045',height:\"100vh\",width:'100%'}}>\n\n\n      <Dialog\n        open={geneDialogFlag}\n        onClose={handleCloseGeneDialog}>\n        <DialogContent>\n          <Typography variant=\"h4\">Just For You Gene</Typography>\n          <img src={Finger} style={{marginTop:20}} placeholder={Joker}></img>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleCloseGeneDialog} color=\"primary\">\n            Agree\n          </Button>\n\n        </DialogActions>\n      </Dialog>\n      <AppBar position=\"static\">\n      <Toolbar>\n        <Typography variant=\"h6\" className={classes.title}>\n          Dawg's Cup\n        </Typography>\n        <Button color=\"inherit\" onClick={handleGeneDialog}>Click Me</Button>\n      </Toolbar>\n    </AppBar>\n      <Card raised={true} style={{paddingTop:20,marginLeft:'30%',marginRight:'30%',paddingBottom:40,marginTop:25}}>\n        <Typography variant=\"h3\">Cards Remaining : {cardsRemaining}</Typography>\n        <Grid container style={{marginTop:20,marginBottom:20}}>\n          <img src={card.image ? card.image : Joker} alt=\"Card\" className={classes.cardSize} id=\"imageId\"></img>\n        </Grid>\n      <Grid container style={{paddingLeft:20,paddingRight:20}}>\n        <Grid item xs={12} sm={12} md={6} lg={6}>\n          <Button color=\"primary\" variant=\"contained\" size=\"large\" style={{height:80,fontSize:'20pt'}} onClick={handleShuffle} fullWidth>Shuffle Deck</Button>\n        </Grid>\n        <Grid item xs={12} sm={12} md={6} lg={6}>\n          <Button color=\"primary\" variant=\"outlined\" size=\"large\" style={{height:80,fontSize:'20pt'}} onClick={handleGetCard} disabled={cardsRemaining===0} fullWidth>Next Card</Button>\n        </Grid>\n      </Grid>\n        \n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\n\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#094074',\n      dark: '#709D47',\n      contrastText: '#ffffff'\n    },\n    secondary: {\n      main: '#efefef',\n      dark: '#cfcfcf  ',\n      contrastText: '#000000'\n    }\n  }\n})\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}